name: check_smash_devel_repo

# Run this workflow every time a new commit pushed to your repository
on:
  push:
    branches:
      - main
      - develop
      - release*
      - hotfix*
  pull_request:
    branches:
      - main
      - develop
      - release*
      - hotfix*

jobs:
  workflow-gsi:
    runs-on: [self-hosted,gsi]
    # Name the Job
    name: test_gsi_system

    steps:
       # Checks out a copy of the repository
      - uses: actions/checkout@v4
      - name: building_and_testing_SMASH
        run: |
          # we set up the variables with the SMASH source and build directories
          export SMASH_ROOT=${GITHUB_WORKSPACE}
          # variables dealing with the Singularity container
          export TOOLS_DIR=/scratch/smash/GH-actions-runners/tools_and_containers
          export PATH=${TOOLS_DIR}/clang13_0_0/bin/:${TOOLS_DIR}/python-tools/bin/:${PATH}
          export PYTHONPATH=${TOOLS_DIR}/python-tools:${PYTHONPATH}
          export CC=gcc-8
          export CXX=g++-8
          export container_file=${TOOLS_DIR}/ubuntu-20-with-gnu-8-pythia-8315.sif
          # preliminarily, we check if the code is well formatted with clang-format and cmake-format
          cd ${SMASH_ROOT}
          ./bin/codebase-format-helper.bash C++ -t
          ./bin/codebase-format-helper.bash CMake -t
          ./bin/codebase-format-helper.bash Python -t
          # we configure SMASH using the environment provided by a Singularity container
          mkdir -p ${SMASH_ROOT}/build
          cd ${SMASH_ROOT}/build
          singularity exec ${container_file} cmake -DENABLE_FUNCTIONAL_TESTS=ON ..
          # we check if the code is well formatted with cpplint
          export CTEST_OUTPUT_ON_FAILURE=1
          singularity exec ${container_file} ctest -R "cpplint"
          # we build the documentation
          singularity exec ${container_file} make undocumented_test
          singularity exec ${container_file} make user
          # we build SMASH
          singularity exec ${container_file} make -j $(nproc)
          # now we run the tests, excluding cpplint (which has been already executed) and potentials*
          singularity exec ${container_file} ctest -j$(nproc) -E "^(potentials(_run)?|cpplint)$"
          # now we run the potentials* tests that require some additional care
          singularity exec ${container_file} ctest -R "^potentials$" --repeat until-pass:3
          singularity exec ${container_file} ctest -R "^potentials_run$" --timeout 3600


  workflow-itp:
    runs-on: [self-hosted,itp]
    # Name the Job
    name: test_itp_system

    steps:
      # Checks out a copy of the repository
      - uses: actions/checkout@v4
      - name: building_and_testing_SMASH
        run: |
          # we set up the variables with the SMASH source and build directories
          export SMASH_ROOT=${GITHUB_WORKSPACE}
          # this directory contains Pythia, Clang, Eigen and other tools which are needed later
          # here we do not use ${HOME} because the runner is hosted in a shared common group directory
          # NOTE: Setting LD_LIBRARY_PATH with Pythia libraries is needed to let the executable
          #       correctly load the library at run time (e.g. in testing SMASH as library).
          #       This is needed when using the GNU compiler but not for some reason with LLVM one.
          export TOOLS_DIR=/home/ag-elfner/GitHub/GH-actions-runners/tools_and_containers
          export PATH=${TOOLS_DIR}/bin:${TOOLS_DIR}/python-tools/bin/:${PATH}
          export LD_LIBRARY_PATH=${TOOLS_DIR}/pythia8315/lib:${LD_LIBRARY_PATH}
          export PYTHONPATH=${TOOLS_DIR}/python-tools:${PYTHONPATH}
          export CC=gcc-13
          export CXX=g++-13
          # preliminarily, we check if the code is well formatted
          cd ${SMASH_ROOT}
          ./bin/codebase-format-helper.bash C++ -t
          ./bin/codebase-format-helper.bash CMake -t
          ./bin/codebase-format-helper.bash Python -t
          # now we configure SMASH
          mkdir -p ${SMASH_ROOT}/build
          cd ${SMASH_ROOT}/build
          cmake -DPythia_CONFIG_EXECUTABLE=$TOOLS_DIR/pythia8315/bin/pythia8-config -DENABLE_FUNCTIONAL_TESTS=ON ..
          # we check if the code is well formatted with cpplint
          export CTEST_OUTPUT_ON_FAILURE=1
          ctest -R "cpplint"
          # we build the documentation
          make undocumented_test
          make user
          # we build SMASH
          make -j $(nproc)
          # now we run the tests, excluding cpplint (which has been already executed) and potentials*
          ctest -j$(nproc) -E "^(potentials(_run)?|cpplint)$"
          # now we run the potentials* tests that require some additional care
          ctest -R "^potentials$" --repeat until-pass:3
          ctest -R "^potentials_run$" --timeout 3600
